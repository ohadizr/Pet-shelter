{"ast":null,"code":"// import React from 'react';\n// import './DoubleRangeSlider.scss'\n// import {Line,Rows} from '../../Line/Line'\n\n// class DoubleRangeSlider extends React.Component {\n// state = {\n//     sliderWidth: 0,\n//     offsetSliderWidht: 0,\n//     min: this.props.min || 0,\n//     max: this.props.max || 200,\n//     minValueBetween: this.props.minValueBetween || 10,\n\n//     currentMin:  this.props.min ,\n//     inputMin:  this.props.min ,\n\n//     currentMax:  this.props.max -1,\n//     inputMax: this.props.max -1,\n// };\n\n//  componentDidMount() {\n//    const { currentMin, currentMax, max } = this.state;\n\n//    this.minValue.style.width = (currentMin*100)/max + \"%\";\n//    this.maxValue.style.width = (currentMax*100)/max + \"%\";\n\n//    this.setState({\n//      sliderWidth: this.slider.offsetWidth,\n//      offsetSliderWidht: this.slider.offsetLeft,\n//    })\n//  }\n\n//   setMin = (e) => {\n//     const { min, max, currentMax, minValueBetween } = this.state;\n//     const inputMin = e.target.value;\n\n//     this.setState({\n//         inputMin\n//     });\n\n//     if((inputMin >= min) && (inputMin <= (currentMax-minValueBetween))){\n//       this.setState({\n//         currentMin: parseInt(inputMin)\n//       }); \n\n//       this.minValue.style.width = (inputMin*100)/max + \"%\";\n//     }\n//   }\n\n//   changeMinValue = (e) => {\n//     e.preventDefault();\n\n//     document.addEventListener('mousemove', this.onMouseMoveMin);\n//     document.addEventListener('mouseup', this.onMouseUpMin);\n\n//     document.addEventListener('touchmove', this.onMouseMoveMin);\n//     document.addEventListener('touchend', this.onMouseUpMin);\n//   }\n\n//   onMouseMoveMin = (e) => {\n//     const { min, max, currentMax, minValueBetween, sliderWidth, offsetSliderWidht } = this.state;\n\n//     const dragedWidht = e.clientX - offsetSliderWidht;\n//     const dragedWidhtInPercent = (dragedWidht*100)/sliderWidth;\n//     const currentMin = Math.abs(parseInt((max * dragedWidhtInPercent)/100));\n\n//     console.log(e.pageX, e.clientX, offsetSliderWidht);\n\n//     console.log(currentMin , (currentMax-minValueBetween));\n\n//     console.log((max * dragedWidhtInPercent)/100);\n\n//     if( (currentMin >= min) && (currentMin <= (currentMax-minValueBetween))){\n//       this.minValue.style.width = dragedWidhtInPercent + \"%\";\n//       this.minValue.dataset.content = currentMin;\n\n//       this.setState({\n//         currentMin,\n//         inputMin: currentMin\n//       })\n//     }\n//   }\n\n//   onMouseUpMin = () => {\n//     document.removeEventListener('mouseup', this.onMouseUpMin);\n//     document.removeEventListener('mousemove', this.onMouseMoveMin);\n\n//     document.removeEventListener('touchend', this.onMouseMoveMin);\n//     document.removeEventListener('touchmove', this.onMouseUpMin);\n//   }\n\n//   setMax = (e) => {\n//     const { min, max, currentMin, currentMax, minValueBetween } = this.state;\n\n//     const inputMax = e.target.value;\n\n//     this.setState({\n//         inputMax\n//     });\n\n//     if((inputMax >= currentMin + minValueBetween) && (inputMax <= max)){\n\n//       this.setState({\n//         currentMax: parseInt(inputMax)\n//       });\n//       this.maxValue.style.width = (inputMax*100)/max + \"%\";\n//     }\n\n//   }\n\n//   changeMaxValue = (e) => {\n//     e.preventDefault();\n\n//     document.addEventListener('mousemove', this.onMouseMoveMax);\n//     document.addEventListener('mouseup', this.onMouseUpMax);\n\n//     document.addEventListener('touchmove', this.onMouseMoveMax);\n//     document.addEventListener('touchend', this.onMouseUpMax);\n//   }\n\n//   onMouseMoveMax = (e) => {\n//     const { max, currentMin, minValueBetween, sliderWidth, offsetSliderWidht} = this.state; \n//     const maxWalueThumb = this.maxValue;\n//     const dragedWidht = e.clientX - offsetSliderWidht;\n//     const dragedWidhtInPercent = (dragedWidht*100)/sliderWidth;\n//     const currentMax = Math.abs(parseInt((max * dragedWidhtInPercent)/100));\n\n//     if( (currentMax >= (currentMin + minValueBetween)) && (currentMax <= max)){\n\n//       maxWalueThumb.style.width = dragedWidhtInPercent + \"%\";\n//       maxWalueThumb.dataset.content = currentMax;\n//       this.setState({\n//         currentMax,\n//         inputMax: currentMax\n//       })\n//     }\n//   }\n\n//   onMouseUpMax = () => {\n//     document.removeEventListener('mouseup', this.onMouseUp);\n//     document.removeEventListener('mousemove', this.onMouseMoveMax);\n\n//     document.removeEventListener('touchend', this.onMouseUp);\n//     document.removeEventListener('touchmove', this.onMouseMoveMax);\n//   }\n\n//   maxForMin = () => {\n//     const { currentMax, minValueBetween} = this.state; \n//     return currentMax - minValueBetween;\n//   }\n\n//   minForMax = () => {\n//     const { currentMin, minValueBetween} = this.state; \n//     return currentMin + minValueBetween;\n//   }\n\n//   render() {\n//     const { min, max, currentMin, inputMin, currentMax, inputMax, minValueBetween } = this.state;\n\n//     return (\n//       <div className=\"card\"> \n//                 <Line addClass={\"around current-value\"}>\n//           <label htmlFor=\"min-input\">Min: </label>\n\n//           <input \n//             id=\"min-input\" \n//             type=\"number\" \n//             onChange={this.setMin} \n//             value={inputMin}\n//             min={min}\n//             max={this.maxForMin}/>\n\n//           <br/>\n\n//           <label htmlFor=\"max-input\">Max: </label>\n//           <input \n//             id=\"max-input\" \n//             type=\"number\" \n//             onChange={this.setMax} \n//             value={inputMax}\n//             min={this.minForMax}\n//             max={max}/>\n//         </Line>\n//       <Line>\n\n//           <div>{ min }</div>\n\n//         <div ref={ref => this.slider = ref} id=\"slider\">\n\n//           <div ref={ref => this.minValue = ref} id=\"min\" data-content={currentMin}>\n//             <div ref={ref => this.minValueDrag = ref} id=\"min-drag\" onMouseDown ={this.changeMinValue} onTouchStart={this.changeMinValue}></div>\n//           </div>\n\n//           <div ref={ref => this.maxValue = ref} id=\"max\" data-content={currentMax}>\n//             <div ref={ref => this.maxValueDrag = ref} id=\"max-drag\" onMouseDown={this.changeMaxValue} onTouchStart={this.changeMaxValue}></div>\n//           </div>\n\n//         </div>\n//         <div>{ max }</div>\n//         </Line>\n//       </div>\n//     )\n//   }\n// }\n\n// export default DoubleRangeSlider","map":{"version":3,"names":[],"sources":["/Users/ohad/Desktop/GitCollaborationDemo/pat-addoption-ohadizr/App/src/assets/UiKit/premade_componenets/DoubleRangeSlider/DoubleRangeSlider.jsx"],"sourcesContent":["// import React from 'react';\n// import './DoubleRangeSlider.scss'\n// import {Line,Rows} from '../../Line/Line'\n\n// class DoubleRangeSlider extends React.Component {\n// state = {\n//     sliderWidth: 0,\n//     offsetSliderWidht: 0,\n//     min: this.props.min || 0,\n//     max: this.props.max || 200,\n//     minValueBetween: this.props.minValueBetween || 10,\n    \n//     currentMin:  this.props.min ,\n//     inputMin:  this.props.min ,\n    \n//     currentMax:  this.props.max -1,\n//     inputMax: this.props.max -1,\n// };\n\n//  componentDidMount() {\n//    const { currentMin, currentMax, max } = this.state;\n   \n//    this.minValue.style.width = (currentMin*100)/max + \"%\";\n//    this.maxValue.style.width = (currentMax*100)/max + \"%\";\n   \n//    this.setState({\n//      sliderWidth: this.slider.offsetWidth,\n//      offsetSliderWidht: this.slider.offsetLeft,\n//    })\n//  }\n\n//   setMin = (e) => {\n//     const { min, max, currentMax, minValueBetween } = this.state;\n//     const inputMin = e.target.value;\n    \n//     this.setState({\n//         inputMin\n//     });\n    \n//     if((inputMin >= min) && (inputMin <= (currentMax-minValueBetween))){\n//       this.setState({\n//         currentMin: parseInt(inputMin)\n//       }); \n\n//       this.minValue.style.width = (inputMin*100)/max + \"%\";\n//     }\n//   }\n\n//   changeMinValue = (e) => {\n//     e.preventDefault();\n\n//     document.addEventListener('mousemove', this.onMouseMoveMin);\n//     document.addEventListener('mouseup', this.onMouseUpMin);\n    \n//     document.addEventListener('touchmove', this.onMouseMoveMin);\n//     document.addEventListener('touchend', this.onMouseUpMin);\n//   }\n\n//   onMouseMoveMin = (e) => {\n//     const { min, max, currentMax, minValueBetween, sliderWidth, offsetSliderWidht } = this.state;\n    \n//     const dragedWidht = e.clientX - offsetSliderWidht;\n//     const dragedWidhtInPercent = (dragedWidht*100)/sliderWidth;\n//     const currentMin = Math.abs(parseInt((max * dragedWidhtInPercent)/100));\n    \n//     console.log(e.pageX, e.clientX, offsetSliderWidht);\n    \n//     console.log(currentMin , (currentMax-minValueBetween));\n    \n//     console.log((max * dragedWidhtInPercent)/100);\n \n//     if( (currentMin >= min) && (currentMin <= (currentMax-minValueBetween))){\n//       this.minValue.style.width = dragedWidhtInPercent + \"%\";\n//       this.minValue.dataset.content = currentMin;\n\n//       this.setState({\n//         currentMin,\n//         inputMin: currentMin\n//       })\n//     }\n//   }\n\n//   onMouseUpMin = () => {\n//     document.removeEventListener('mouseup', this.onMouseUpMin);\n//     document.removeEventListener('mousemove', this.onMouseMoveMin);\n    \n//     document.removeEventListener('touchend', this.onMouseMoveMin);\n//     document.removeEventListener('touchmove', this.onMouseUpMin);\n//   }\n  \n  \n//   setMax = (e) => {\n//     const { min, max, currentMin, currentMax, minValueBetween } = this.state;\n\n//     const inputMax = e.target.value;\n    \n//     this.setState({\n//         inputMax\n//     });\n\n//     if((inputMax >= currentMin + minValueBetween) && (inputMax <= max)){\n      \n//       this.setState({\n//         currentMax: parseInt(inputMax)\n//       });\n//       this.maxValue.style.width = (inputMax*100)/max + \"%\";\n//     }\n      \n//   }\n  \n//   changeMaxValue = (e) => {\n//     e.preventDefault();\n\n//     document.addEventListener('mousemove', this.onMouseMoveMax);\n//     document.addEventListener('mouseup', this.onMouseUpMax);\n    \n//     document.addEventListener('touchmove', this.onMouseMoveMax);\n//     document.addEventListener('touchend', this.onMouseUpMax);\n//   }\n\n//   onMouseMoveMax = (e) => {\n//     const { max, currentMin, minValueBetween, sliderWidth, offsetSliderWidht} = this.state; \n//     const maxWalueThumb = this.maxValue;\n//     const dragedWidht = e.clientX - offsetSliderWidht;\n//     const dragedWidhtInPercent = (dragedWidht*100)/sliderWidth;\n//     const currentMax = Math.abs(parseInt((max * dragedWidhtInPercent)/100));\n    \n//     if( (currentMax >= (currentMin + minValueBetween)) && (currentMax <= max)){\n      \n//       maxWalueThumb.style.width = dragedWidhtInPercent + \"%\";\n//       maxWalueThumb.dataset.content = currentMax;\n//       this.setState({\n//         currentMax,\n//         inputMax: currentMax\n//       })\n//     }\n//   }\n\n//   onMouseUpMax = () => {\n//     document.removeEventListener('mouseup', this.onMouseUp);\n//     document.removeEventListener('mousemove', this.onMouseMoveMax);\n    \n//     document.removeEventListener('touchend', this.onMouseUp);\n//     document.removeEventListener('touchmove', this.onMouseMoveMax);\n//   }\n  \n//   maxForMin = () => {\n//     const { currentMax, minValueBetween} = this.state; \n//     return currentMax - minValueBetween;\n//   }\n  \n//   minForMax = () => {\n//     const { currentMin, minValueBetween} = this.state; \n//     return currentMin + minValueBetween;\n//   }\n\n\n//   render() {\n//     const { min, max, currentMin, inputMin, currentMax, inputMax, minValueBetween } = this.state;\n    \n//     return (\n//       <div className=\"card\"> \n//                 <Line addClass={\"around current-value\"}>\n//           <label htmlFor=\"min-input\">Min: </label>\n  \n//           <input \n//             id=\"min-input\" \n//             type=\"number\" \n//             onChange={this.setMin} \n//             value={inputMin}\n//             min={min}\n//             max={this.maxForMin}/>\n          \n//           <br/>\n\n//           <label htmlFor=\"max-input\">Max: </label>\n//           <input \n//             id=\"max-input\" \n//             type=\"number\" \n//             onChange={this.setMax} \n//             value={inputMax}\n//             min={this.minForMax}\n//             max={max}/>\n//         </Line>\n//       <Line>\n\n//           <div>{ min }</div>\n\n\n//         <div ref={ref => this.slider = ref} id=\"slider\">\n\n//           <div ref={ref => this.minValue = ref} id=\"min\" data-content={currentMin}>\n//             <div ref={ref => this.minValueDrag = ref} id=\"min-drag\" onMouseDown ={this.changeMinValue} onTouchStart={this.changeMinValue}></div>\n//           </div>\n\n//           <div ref={ref => this.maxValue = ref} id=\"max\" data-content={currentMax}>\n//             <div ref={ref => this.maxValueDrag = ref} id=\"max-drag\" onMouseDown={this.changeMaxValue} onTouchStart={this.changeMaxValue}></div>\n//           </div>\n\n//         </div>\n//         <div>{ max }</div>\n//         </Line>\n//       </div>\n//     )\n//   }\n// }\n\n// export default DoubleRangeSlider"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}