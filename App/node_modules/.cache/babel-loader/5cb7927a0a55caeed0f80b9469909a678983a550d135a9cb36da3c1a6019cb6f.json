{"ast":null,"code":"import React from 'react';\nimport localforage from 'localforage';\nimport { useNavigate } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nclass PetsApi extends React.Component {\n  async getPetData() {\n    const web = 'http://localhost:8000/pets';\n    try {\n      const response = await fetch(web);\n      const results = await response.json();\n      return results;\n    } catch (error) {\n      console.log(error);\n    }\n  } //tested and working\n\n  async createPet(pet) {\n    const web = 'http://localhost:8000/pet';\n    try {\n      const response = await fetch(web, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(pet)\n      });\n      const results = await response.json();\n      return results;\n    } catch (error) {\n      console.log(error);\n    }\n  } //untested\n\n  async getPetById(id) {\n    const web = `http://localhost:8000/pets/${id}`;\n    try {\n      const response = await fetch(web);\n      const results = await response.json();\n      return results;\n    } catch (error) {\n      console.log(error);\n    }\n  } //untested\n\n  async getPetByUserId(id) {\n    const web = `http://localhost:8000/pets/user/${id}`;\n    try {\n      const response = await fetch(web);\n      const results = await response.json();\n      return results;\n    } catch (error) {\n      console.log(error);\n    }\n  } //untested\n\n  async getPetFiltered(filter) {\n    const web = `http://localhost:8000/pet}`;\n    try {\n      const response = await fetch(web);\n      const results = await response.json();\n      return results;\n    } catch (error) {\n      console.log(error);\n    }\n  } //untested\n\n  async updatePet(id, pet) {\n    const web = `http://localhost:8000/pet/${id}`;\n    try {\n      const response = await fetch(web, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(pet)\n      });\n      const results = await response.json();\n      return results;\n    } catch (error) {\n      console.log(error);\n    }\n  } //untested\\\n\n  async filtered(filter) {\n    try {\n      const web = `http://localhost:8000/pet}`;\n      const response = await fetch(web, {\n        method: 'get',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          color: filter.color,\n          bio: filter.bio,\n          age: filter.age,\n          hypoallergenic: filter.hypoallergenic,\n          dietary_restrictions: filter.dietary_restrictions,\n          breed: filter.breed,\n          wight: filter.wight,\n          adoption_status: filter.adoption_status,\n          name: filter.name\n        })\n      });\n      const results = await response.json();\n      return results;\n    } catch (error) {\n      console.log(error);\n    }\n  } //untested\n}\n\nexport default PetsApi;","map":{"version":3,"names":["React","localforage","useNavigate","PropTypes","PetsApi","Component","getPetData","web","response","fetch","results","json","error","console","log","createPet","pet","method","headers","body","JSON","stringify","getPetById","id","getPetByUserId","getPetFiltered","filter","updatePet","filtered","color","bio","age","hypoallergenic","dietary_restrictions","breed","wight","adoption_status","name"],"sources":["/Users/ohad/Desktop/GitCollaborationDemo/pat-addoption-ohadizr/App/src/Data/PetApi.jsx"],"sourcesContent":["\nimport React from 'react';\nimport localforage from 'localforage';\nimport { useNavigate } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\n\nclass PetsApi extends React.Component {\n\n\n     async  getPetData() {\n        const web = 'http://localhost:8000/pets';\n        try {\n        const response = await fetch(web);\n        const results = await response.json();\n        return results\n        } catch (error) {\n            console.log(error);\n        }\n    }  //tested and working\n\n    async createPet(pet) {\n        const web = 'http://localhost:8000/pet';\n        try {\n        const response = await fetch(web, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(pet),\n        });\n        const results = await response.json();\n        return results\n        } catch (error) {\n            console.log(error);\n        }\n    }  //untested\n\n    async getPetById(id) {\n        const web = `http://localhost:8000/pets/${id}`;\n        try {\n        const response = await fetch(web);\n        const results = await response.json();\n        return results\n        } catch (error) {\n            console.log(error);\n        }\n    }  //untested\n\n    async getPetByUserId(id) {\n        const web = `http://localhost:8000/pets/user/${id}`;\n        try {\n        const response = await fetch(web);\n        const results = await response.json();\n        return results\n        } catch (error) {\n            console.log(error);\n        }\n    }  //untested\n\n    async getPetFiltered(filter) {\n        const web = `http://localhost:8000/pet}`;\n        try {\n        const response = await fetch(web);\n        const results = await response.json();\n        return results\n        } catch (error) {\n            console.log(error);\n        }\n    }  //untested\n    \n    async updatePet(id, pet) {\n        const web = `http://localhost:8000/pet/${id}`;\n        try {\n        const response = await fetch(web, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(pet),\n        });\n        const results = await response.json();\n        return results\n        } catch (error) {\n            console.log(error);\n        }\n    }  //untested\\\n\n    async filtered(filter) {\n        try {\n        const web = `http://localhost:8000/pet}`;\n        const response = await fetch(web, {\n            method: 'get',\n            headers: {\n                'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    color: filter.color,\n                    bio: filter.bio,\n                    age: filter.age,\n                    hypoallergenic: filter.hypoallergenic,\n                    dietary_restrictions: filter.dietary_restrictions,\n                    breed: filter.breed,\n                    wight: filter.wight,\n                    adoption_status: filter.adoption_status,\n                    name: filter.name,\n                }),\n  \n                });\n        const results = await response.json();\n        return results\n        } catch (error) {\n            console.log(error);\n        }\n    }  //untested\n\n\n}\n\nexport default PetsApi;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}