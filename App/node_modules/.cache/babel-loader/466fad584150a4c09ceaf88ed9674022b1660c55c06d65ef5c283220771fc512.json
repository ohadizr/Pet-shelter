{"ast":null,"code":"import React from 'react';\nimport localforage from 'localforage';\nimport { useNavigate } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nclass PetsApi extends React.Component {\n  async getPetData() {\n    const web = 'http://localhost:8000/pets';\n    try {\n      const response = await fetch(web);\n      const results = await response.json();\n      return results;\n    } catch (error) {\n      console.log(error);\n    }\n  } //tested and working\n\n  async getPetById(id) {\n    const web = `http://localhost:8000/pets/${id}`;\n    try {\n      const response = await fetch(web);\n      const results = await response.json();\n      return results;\n    } catch (error) {\n      console.log(error);\n    }\n  } //untested\n\n  async getPetByUserId(id) {\n    const web = `http://localhost:8000/pets/user/${id}`;\n    try {\n      const response = await fetch(web);\n      const results = await response.json();\n      return results;\n    } catch (error) {\n      console.log(error);\n    }\n  } //untested\n\n  async getPetFiltered(filter) {\n    const web = `http://localhost:8000/pet}`;\n    try {\n      const response = await fetch(web);\n      const results = await response.json();\n      return results;\n    } catch (error) {\n      console.log(error);\n    }\n  } //untested\n\n  async updatePet(id, pet) {\n    const web = `http://localhost:8000/pet/${id}`;\n    try {\n      const response = await fetch(web, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(pet)\n      });\n      const results = await response.json();\n      return results;\n    } catch (error) {\n      console.log(error);\n    }\n  } //untested\n}\n\nexport default PetsApi;","map":{"version":3,"names":["React","localforage","useNavigate","PropTypes","PetsApi","Component","getPetData","web","response","fetch","results","json","error","console","log","getPetById","id","getPetByUserId","getPetFiltered","filter","updatePet","pet","method","headers","body","JSON","stringify"],"sources":["/Users/ohad/Desktop/GitCollaborationDemo/pat-addoption-ohadizr/App/src/Data/PetApi.jsx"],"sourcesContent":["\nimport React from 'react';\nimport localforage from 'localforage';\nimport { useNavigate } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\n\nclass PetsApi extends React.Component {\n\n\n     async  getPetData() {\n        const web = 'http://localhost:8000/pets';\n        try {\n        const response = await fetch(web);\n        const results = await response.json();\n        return results\n        } catch (error) {\n            console.log(error);\n        }\n    }  //tested and working\n\n    async getPetById(id) {\n        const web = `http://localhost:8000/pets/${id}`;\n        try {\n        const response = await fetch(web);\n        const results = await response.json();\n        return results\n        } catch (error) {\n            console.log(error);\n        }\n    }  //untested\n\n    async getPetByUserId(id) {\n        const web = `http://localhost:8000/pets/user/${id}`;\n        try {\n        const response = await fetch(web);\n        const results = await response.json();\n        return results\n        } catch (error) {\n            console.log(error);\n        }\n    }  //untested\n\n    async getPetFiltered(filter) {\n        const web = `http://localhost:8000/pet}`;\n        try {\n        const response = await fetch(web);\n        const results = await response.json();\n        return results\n        } catch (error) {\n            console.log(error);\n        }\n    }  //untested\n    \n    async updatePet(id, pet) {\n        const web = `http://localhost:8000/pet/${id}`;\n        try {\n        const response = await fetch(web, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(pet),\n        });\n        const results = await response.json();\n        return results\n        } catch (error) {\n            console.log(error);\n        }\n    }  //untested\n\n    \n}\n\nexport default PetsApi;"],"mappings":"AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,aAAa;AACrC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,SAAS,MAAM,YAAY;AAGlC,MAAMC,OAAO,SAASJ,KAAK,CAACK,SAAS,CAAC;EAGjC,MAAOC,UAAU,GAAG;IACjB,MAAMC,GAAG,GAAG,4BAA4B;IACxC,IAAI;MACJ,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;MACjC,MAAMG,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;MACrC,OAAOD,OAAO;IACd,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACtB;EACJ,CAAC,CAAE;;EAEH,MAAMG,UAAU,CAACC,EAAE,EAAE;IACjB,MAAMT,GAAG,GAAI,8BAA6BS,EAAG,EAAC;IAC9C,IAAI;MACJ,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;MACjC,MAAMG,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;MACrC,OAAOD,OAAO;IACd,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACtB;EACJ,CAAC,CAAE;;EAEH,MAAMK,cAAc,CAACD,EAAE,EAAE;IACrB,MAAMT,GAAG,GAAI,mCAAkCS,EAAG,EAAC;IACnD,IAAI;MACJ,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;MACjC,MAAMG,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;MACrC,OAAOD,OAAO;IACd,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACtB;EACJ,CAAC,CAAE;;EAEH,MAAMM,cAAc,CAACC,MAAM,EAAE;IACzB,MAAMZ,GAAG,GAAI,4BAA2B;IACxC,IAAI;MACJ,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;MACjC,MAAMG,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;MACrC,OAAOD,OAAO;IACd,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACtB;EACJ,CAAC,CAAE;;EAEH,MAAMQ,SAAS,CAACJ,EAAE,EAAEK,GAAG,EAAE;IACrB,MAAMd,GAAG,GAAI,6BAA4BS,EAAG,EAAC;IAC7C,IAAI;MACJ,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;QAC9Be,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,GAAG;MAC5B,CAAC,CAAC;MACF,MAAMX,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;MACrC,OAAOD,OAAO;IACd,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACtB;EACJ,CAAC,CAAE;AAGP;;AAEA,eAAeR,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}